// UTILITY MIXINS
// --------------------------------------------------

// Webkit-style focus
// --------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin text-overflow() {
overflow: hidden;
text-overflow: ellipsis;
white-space: nowrap; }

// MIXINS
// --------------------------------------------------

%tab-focus {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


//  Typography
// --------------------------------------------------

/*  Vertical Rhythm
  https://github.com/sturobson/Sassifaction

  In this mixin you can specify the font size in PX and 
  it will calculate the REM based on your $doc-font-size 
  & $doc-line-height variables. 

    @include font-size(24);

  It will also create a bottom margin based on the 
  $doc-font-size & $doc-line-height variables unless you 
  specify that it shouldn't have one.

    @include font-size(24, no);

  Or if you want to specify a different bottom margin to 
  be generated.

    @include font-size(24,32);

  This mixin also generates a pixel-less line height by 
  default unless you specify that you either don't want 
  one where I'd suggest declaring 1 within the mixin.

    @include font-size(24, yes, 1);

  There's also the option to specify a different line-height 
  for it to generate to, where you would specify the 
  line-height in (effectively) it's pixel value.

    @include font-size(24, yes, 40);
*/

@mixin font-size($size, $margin: yes, $line-height: $doc-line-height) {
    
  // generates the font-size in REMs with a PX fallback
  font-size: 0px + $size;
  font-size: 0rem + $size / $doc-font-size;

  // line-height functions
  ////////////////////////

  // if you a line-height is specified in the mixin
  @if $line-height != $doc-line-height and $line-height != 1 {
    line-height: ceil($size / $line-height) * ($line-height / $size);
  }
  
  // if $line-height == 1
  // because, typing 1 is quicker than 16
  @else if $line-height == 1 {
    line-height: 1;
  }

  // normal $line-height
  // if the line-height is left.
  @else {
    line-height: ceil($size / $doc-line-height) * ($doc-line-height / $size);
  }

  // margin-bottom functions
  //////////////////////////

  // if no is bottom margin is required
  @if $margin == no {
    margin-bottom: 0;  
  }  
  
  // if a specific bottom margin is required
  @else if $margin != yes and $margin != no {
    margin-bottom: 0px + $margin;
    margin-bottom: 0rem + ($margin / $doc-font-size);  
  }

  // if you are keeping the vertical rhythm with the margin
  @else {
    margin-bottom: 0px + $doc-line-height;
    margin-bottom: 0rem + ($doc-line-height / $doc-font-size);  
  }
}

// ROUND CORNERS
// --------------------------------------------------

// @include rounded(VALUE);
@mixin rounded($radius:4px) {
border-radius : $radius; }

// @include border-radius(VALUE,VALUE,VALUE,VALUE);
@mixin border-radius($topright: 0, $bottomright: 0, $bottomleft: 0, $topleft: 0) {
border-top-right-radius : $topright;
border-bottom-right-radius : $bottomright;
border-bottom-left-radius : $bottomleft;
border-top-left-radius : $topleft;
background-clip : padding-box; }

// @include box-shadow(HORIZONTAL VERTICAL BLUR COLOR))
@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
-webkit-box-shadow : $shadow;
-moz-box-shadow : $shadow;
box-shadow : $shadow; }

// @include drop-shadow(HORIZONTAL, VERTICAL, BLUR, ALPHA);
@mixin drop-shadow($x-axis: 0, $y-axis: 1px, $blur: 2px, $alpha: 0.1) {
-webkit-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
-moz-box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha);
box-shadow : $x-axis $y-axis $blur rgba(0, 0, 0, $alpha); }

// @include text-shadow();
@mixin text-shadow($shadow: 0 2px 3px rgba(0,0,0,.25)) {
text-shadow : $shadow; }

// @include opacity(VALUE);
@mixin opacity($opacity : .5) {
opacity : $opacity; }

// For image replacement
@mixin hide-text() {
text-indent : 100%;
white-space : nowrap;
overflow : hidden; }

// Hide from visual and speaking browsers
@mixin hidden() {
display : none !important; 
visibility : hidden; }
.hidden {
  display: none;
  visibility: hidden;
}

// Hide but maintain layout
@mixin invisible() { 
visibility : hidden; }

// @include resize(VALUE) (none, both, horizontal, vertical, inherit)
@mixin resize($direction: both) {
resize : $direction;
overflow : auto; }

// @include userselect(VALUE) (all, element, none, text)
@mixin user-select($select) {
-webkit-user-select : $select;
-moz-user-select : $select;
-o-user-select : $select;
user-select : $select; }

// Hidden but available to speaking browsers
@mixin visuallyhidden() { 
overflow : hidden; 
position : absolute;
clip : rect(0 0 0 0); 
height : 1px; 
width : 1px;
margin : -1px; 
padding : 0; 
border : 0; }


// HEXAGON IMAGES WITH SHADOW
// --------------------------------------------------

//http://codepen.io/brenna/pen/hbDqL
@mixin hexagon($size: 300px, $background: url(http://placekitten.com/g/650), $shadow: 0 0 20px rgba(0,0,0,0.8), $borderWidth: 3px){
  $scaleFactor: tan(30deg); /*this smushes a square into a 60deg/120deg rhombus*/
  $inverseScale: 1/$scaleFactor;
  $sideLength: $size/sqrt(3);
  $totalHeight: $sideLength + $size;
  $boxShadow: $shadow;
  $scaledBorderWidth: $borderWidth/$scaleFactor;
  $border: solid #{$borderWidth} #fff;
  $scaledBorder: solid #{$scaledBorderWidth} #fff;
  
  position: relative;
  width: $size;
  height: $sideLength;
  margin-top: $size/3;
  margin-bottom: $size/3;
  background: $background;
  background-size: $totalHeight auto;
  background-position: center center;
  box-shadow: $boxShadow; 
  border-left: $border;
  border-right: $border;
  
  .hex1,
  .hex2 {
    position: absolute;
    overflow: hidden;
    width: $size/sqrt(2);
    height: $size/sqrt(2);
    left: $sideLength/4 - $borderWidth + 1px; /*for some reason this 1px correction is needed */
    background: inherit;
    box-shadow: $boxShadow;
    @include transform(scaleY(#{$scaleFactor}) rotate(-45deg));
    
    &:after {
      /*counter rotate and un-scale the bg image*/
      content: "";
      position: absolute;
      left: -($sideLength/4 + 1px); /*same correction as up above */
      width: $size;
      height: $size/sqrt(2);
      top: 0;
      background: inherit;
      
      @include transform(rotate(45deg) scaleY(#{$inverseScale}));
    }
  }

  .hex1 {
    top: - $size/sqrt(2)/2;
    border-top: $scaledBorder;
    border-right: $scaledBorder;
    
    &:after {
      background-position: center 17%; 
      margin-top: -$scaledBorderWidth;
    }
  }
  
  .hex2 {
    bottom: -$size/sqrt(2)/2;
    border-left: $scaledBorder;
    border-bottom: $scaledBorder;
    
    &:after {
      background-position: center 83%;
      margin-left: - $scaledBorderWidth + 1px; /*that pesky single pixel correction again*/
    }
  }
  
  /*cover up the box shadows */
  &:after {
    content: "";
    position: absolute;
    top: $borderWidth/sqrt(2);
    bottom: 0;
    left: 0;
    right: 0;
    height: $sideLength - 2*$borderWidth/sqrt(2);
    background: inherit;
  }
}
